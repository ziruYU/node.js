var Utils=function(){var n;return{getData:function(e){n=e},getBarData:function(){var e={labels:[],series:[]},a=[];return n.children.forEach(function(n){e.labels.push(n.name),a.push(n.children.length)}),e.series.push({label:"Projects count",values:a}),e},getStackData:function(){var e={name:"repos",languages:[]};return n.children.forEach(function(n){if("null"!==n.name){var a={language:n.name,count:n.children.length};e.languages.push(a)}}),[e]},getTreeData:function(){return n}}}();
var Searcher=function(){function t(){o.q=r.property("value")||"bitcoin";var t=[];for(var n in o)t.push(n+"="+o[n]);return s=e+"?"+t.join("&"),console.log(s),i.text("当前搜索地址: "+s),s}var e,r,n,i,s="",c=[],o={q:"bitcoin",sort:"forks",order:"desc",per_page:100};return{settings:{baseApiUrl:"https://api.github.com/search/repositories"},init:function(){r=d3.select("#search-input"),n=d3.select("#search-btn"),i=d3.select("#search-msg"),e=this.settings.baseApiUrl,n.on("click",function(){t(),c.forEach(function(t){try{t(s)}catch(t){console.log(t)}})})},addListener:function(t){c.push(t)}}}();
var Bar=function(){function t(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)u.push(t.series[r].values[e])}function e(){u=[],a=Utils.getBarData(),i=l*a.series.length,t(a);var e=d3.scale.category20(),r=l*u.length+c*a.labels.length,g=d3.scale.linear().domain([0,d3.max(u)]).range([0,s]),h=d3.scale.linear().range([r+c,0]);n=d3.svg.axis().scale(h).tickFormat("").tickSize(0).orient("left");var f=chart.attr("width",o+s+d).attr("height",r),p=f.selectAll("g").data(u,function(t,e){return[t,e]}),x=p.enter().append("g").attr("transform",function(t,e){return"translate("+o+","+(e*l+c*(.5+Math.floor(e/a.series.length)))+")"});x.append("rect").attr("fill",function(t,r){return e(r%a.series.length)}).attr("class","bar").attr("width",g).attr("height",l-1),x.append("text").attr("x",function(t){return g(t)-3}).attr("y",l/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),x.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",i/2).attr("dy",".35em").text(function(t,e){return e%a.series.length==0?a.labels[Math.floor(e/a.series.length)]:""}),p.exit().transition().style({opacity:0}).remove(),f.append("g").attr("class","y axis").attr("transform","translate("+o+", "+-c/2+")").call(n);var b=f.selectAll(".legend").data(a.series),v=b.enter().append("g").attr("transform",function(t,e){return"translate("+(o+s+40-18)+","+(22*e- -c/2)+")"});v.append("rect").attr("width",18).attr("height",18).style("fill",function(t,r){return e(r)}).style("stroke",function(t,r){return e(r)}),v.append("text").attr("class","legend").attr("x",22).attr("y",14).text(function(t){return t.label}),b.exit().remove()}var r,a,n,s=300,l=20,i=0,c=10,o=150,d=150,u=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){r=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(r).append("svg").attr("class","chart")},show:function(){e()}}}();
var Treemap=function(){function t(t){p=f=Utils.getTreeData(t);var a=i.nodes(f).filter(function(t){return!t.children}),s=c.selectAll("g").data(a,function(t){return t.watchers_count}).enter().append("g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return r(p==t.parent?f:t.parent)});s.append("rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return d(t.parent.name)}),s.append("text").attr("x",function(t){return 2*t.dx/3+20}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name}).style("opacity",function(t){return t.w=this.getComputedTextLength(),1}),c.selectAll("g").data(a).exit().transition().style({opacity:0}).remove(),d3.select(window).on("click",function(){r(f)}),d3.select("#treemapSelect").on("change",function(){i.value("watchers"==this.value?e:n).nodes(f),r(p)})}function e(t){return t.watchers_count}function n(t){return t.forks_count}function r(t){var e=s/t.dx,n=o/t.dy;u.domain([t.x,t.x+t.dx]),l.domain([t.y,t.y+t.dy]);var r=c.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+u(t.x)+","+l(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return 2*e*t.dx/3+20}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return 1}),p=t,d3.event.stopPropagation()}var a,i,c,s=970,o=500,u=d3.scale.linear().range([0,s]),l=d3.scale.linear().range([0,o]),d=d3.scale.category20c(),f=[],p=[];return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),a=d3.select(t).append("div").attr("class","chart").style("width",s+"px").style("height",o+"px"),c=a.append("svg").attr("width",s).attr("height",o).append("g").attr("transform","translate(.5,.5)"),i=d3.layout.treemap().size([s,o]).value(function(t){return t.watchers_count})},show:function(e){t(e)}}}();
!function(){function e(e){var a=setTimeout(function(){t.style.display="block"},300);e=e||"http://localhost:3000/search",d3.json(e,function(e,i){e&&(clearTimeout(a),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.getData(i),Bar.show(),Treemap.show(),clearTimeout(a),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),Searcher.addListener(function(t){e(t)}),e()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwic2VhcmNoZXIuanMiLCJiYXIuanMiLCJ0cmVlbWFwLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwidHJlZURhdGEiLCJnZXREYXRhIiwiZGF0YSIsImdldEJhckRhdGEiLCJyZXN1bHQiLCJsYWJlbHMiLCJzZXJpZXMiLCJ2YWx1ZXMiLCJjaGlsZHJlbiIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsIm5hbWUiLCJsZW5ndGgiLCJsYWJlbCIsImdldFN0YWNrRGF0YSIsImxhbmd1YWdlcyIsImNoaWxkIiwibGFuZ3VhZ2UiLCJjb3VudCIsImdldFRyZWVEYXRhIiwiU2VhcmNoZXIiLCJwYXJzZVF1ZXJ5IiwicXVlcnkiLCJxIiwiaW5wdXRUeHQiLCJwcm9wZXJ0eSIsImFyciIsImtleSIsInVybCIsImJhc2VBcGlVcmwiLCJqb2luIiwiY29uc29sZSIsImxvZyIsInNlYXJjaE1zZyIsInRleHQiLCJzZWFyY2hCdG4iLCJsaXN0ZW5lcnMiLCJzb3J0Iiwib3JkZXIiLCJwZXJfcGFnZSIsInNldHRpbmdzIiwiaW5pdCIsImQzIiwic2VsZWN0IiwidGhpcyIsIm9uIiwibGlzdGVuZXIiLCJlcnJvciIsImFkZExpc3RlbmVyIiwiQmFyIiwiemlwcGluZ0RhdGEiLCJpIiwiaiIsInppcHBlZERhdGEiLCJzaG93QmFyIiwiZ3JvdXBIZWlnaHQiLCJiYXJIZWlnaHQiLCJjb2xvciIsInNjYWxlIiwiY2F0ZWdvcnkyMCIsImNoYXJ0SGVpZ2h0IiwiZ2FwQmV0d2Vlbkdyb3VwcyIsIngiLCJsaW5lYXIiLCJkb21haW4iLCJtYXgiLCJyYW5nZSIsImNoYXJ0V2lkdGgiLCJ5IiwieUF4aXMiLCJzdmciLCJheGlzIiwidGlja0Zvcm1hdCIsInRpY2tTaXplIiwib3JpZW50IiwiY2hhcnQiLCJhdHRyIiwic3BhY2VGb3JMYWJlbHMiLCJzcGFjZUZvckxlZ2VuZCIsImJhck5vZGVzIiwic2VsZWN0QWxsIiwiZCIsImJhciIsImVudGVyIiwiYXBwZW5kIiwiTWF0aCIsImZsb29yIiwiZXhpdCIsInRyYW5zaXRpb24iLCJzdHlsZSIsIm9wYWNpdHkiLCJyZW1vdmUiLCJjYWxsIiwibGVnZW5kRGF0YSIsImxlZ2VuZCIsImxlZ2VuZFJlY3RTaXplIiwiYmFySWQiLCJ0aXRsZSIsImRlc2MiLCJzaG93IiwiVHJlZW1hcCIsInNob3dDaGFydCIsIm5vZGUiLCJyb290Iiwibm9kZXMiLCJ0cmVlbWFwIiwiZmlsdGVyIiwiY2VsbCIsIndhdGNoZXJzX2NvdW50Iiwiem9vbSIsInBhcmVudCIsImR4IiwiZHkiLCJ3IiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwid2luZG93IiwidmFsdWUiLCJ3YXRjaGVyc0NvdW50IiwiZm9ya3NDb3VudCIsImZvcmtzX2NvdW50Iiwia3giLCJreSIsImgiLCJ0IiwiZHVyYXRpb24iLCJldmVudCIsImFsdEtleSIsInN0b3BQcm9wYWdhdGlvbiIsImNhdGVnb3J5MjBjIiwidHJlZW1hcElkIiwibGF5b3V0Iiwic2l6ZSIsImxvYWRlciIsInNldFRpbWVvdXQiLCJsb2FkaW5nIiwiZGlzcGxheSIsImpzb24iLCJlcnIiLCJjbGVhclRpbWVvdXQiLCJhbGVydCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQVMsV0FDVCxJQUFJQyxFQUVKLE9BQ0lDLFFBQVMsU0FBU0MsR0FDZEYsRUFBV0UsR0FnQmZDLFdBQVksV0FDUixJQUNJQyxHQUNJQyxVQUNBQyxXQUVKQyxLQVlKLE9BakJZUCxFQUFTUSxTQU9mQyxRQUFRLFNBQVNDLEdBQ25CTixFQUFPQyxPQUFPTSxLQUFLRCxFQUFLRSxNQUN4QkwsRUFBT0ksS0FBS0QsRUFBS0YsU0FBU0ssVUFHOUJULEVBQU9FLE9BQU9LLE1BQ1ZHLE1BQU8saUJBQ1BQLE9BQVFBLElBR0xILEdBVVhXLGFBQWMsV0FDVixJQUVJWCxHQUNBUSxLQUFNLFFBQ05JLGNBZ0JKLE9BcEJZaEIsRUFBU1EsU0FRZkMsUUFBUSxTQUFTQyxHQUNuQixH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QyxHQUNkckMsS0FBSyxTQUFVOEMsR0FDZnRDLE9BQU8sS0FDUFIsS0FBSyxZQUFhLG9CQUV2QjZCLEVBQVUvRCxHQUFHd0YsT0FBT3pCLFVBRWYwQixNQUFNbEIsRUFBR1MsSUFFVE4sTUFBTSxTQUFTbkMsR0FDWixPQUFPQSxFQUFFMkIsa0JBSXJCVCxLQUFNLFNBQVNsRyxHQUNYb0csRUFBVXBHLEtBL0NSO0NDQWQsV0E0QkksU0FBU2tHLEVBQUt2RSxHQUNWLElBQUl3RyxFQUFTQyxXQUFXLFdBQ3BCQyxFQUFRN0MsTUFBTThDLFFBQVUsU0FDekIsS0FFSDNHLEVBQU1BLEdBQU8sK0JBRWJjLEdBQUc4RixLQUFLNUcsRUFBSyxTQUFTNkcsRUFBS3hJLEdBQ25Cd0ksSUFDQUMsYUFBYU4sR0FDYkUsRUFBUTdDLE1BQU04QyxRQUFVLE9BQ3hCSSxNQUFNLHNCQUdWN0ksTUFBTUUsUUFBUUMsR0FFZGdELElBQUlrRCxPQUNKQyxRQUFRRCxPQUVSdUMsYUFBYU4sR0FDYkUsRUFBUTdDLE1BQU04QyxRQUFVLFNBL0NoQyxJQUFJRCxFQUFVTSxTQUFTQyxlQUFlLFNBS3RDekgsU0FBU3FCLE9BS1RRLElBQUlULFVBQ0F5RCxNQUFPLGtCQUNQQyxLQUFNLDBCQUNORixNQUFPLFVBRVgvQyxJQUFJUixPQUtKMkQsUUFBUTVELFVBQ0p5RCxNQUFPLGlCQUNQQyxLQUFNLHNDQUNOK0IsVUFBVyxpQkFFZjdCLFFBQVEzRCxPQTBCUnJCLFNBQVM0QixZQUFZLFNBQVNwQixHQUMxQnVFLEVBQUt2RSxLQUdUdUUsSUF4REoiLCJmaWxlIjoic2FjZGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWxzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmVlRGF0YTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldERhdGE6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHRyZWVEYXRhID0gZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgIERhdGEgZm9ybWF0OlxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbHM6IFtcbiAgICAgICAgICAgICAgICAnYy9jKysnLCAncHl0aG9uJywgJ2phdmFzY3JpcHQnLFxuICAgICAgICAgICAgICAgICdqYXZhJywgJ3J1YnknLCAnaHRtbCdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcm9qZWN0cyBjb3VudCcsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbNCwgOCwgMTUsIDE2LCAyMywgNDJdIC8vY291bnRzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgICAgIGdldEJhckRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdHJlZURhdGEuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IFtdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcblxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmxhYmVscy5wdXNoKGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goaXRlbS5jaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmVzdWx0LnNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Byb2plY3RzIGNvdW50JyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICB7IG5hbWU6IFwicmVwb3NcIiAsIFxuICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlczogWyAgeyBsYW5ndWFnZTogJ2pzJywgY291bnQ6IDMwMDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBsYW5ndWFnZTogJ3J1YnknLCBjb3VudDogMTMwMCB9XVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldFN0YWNrRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0cmVlRGF0YS5jaGlsZHJlbjtcblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInJlcG9zXCIsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VzOiBbXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLzEuIOehruWumuWIneWni+aVsOaNrlxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gXCJudWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBpdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBpdGVtLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXN1bHQubGFuZ3VhZ2VzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIFtyZXN1bHRdO1xuICAgICAgICB9LFxuICAgICAgICAvKiogRGF0YSBmb3JtYXQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImxhbmd1YWdlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJqYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1mbHkvbXlJREVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndhdGNoZXJzX2NvdW50XCI6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcmtzX2NvdW50XCI6IDUwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAqL1xuICAgICAgICBnZXRUcmVlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJlZURhdGE7XG4gICAgICAgIH1cbiAgICB9XG59KCkpXG4iLCJ2YXIgU2VhcmNoZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVybCA9ICcnLFxuICAgICAgICBiYXNlQXBpVXJsLFxuICAgICAgICBpbnB1dFR4dCxcbiAgICAgICAgc2VhcmNoQnRuLFxuICAgICAgICBzZWFyY2hNc2csXG4gICAgICAgIGxpc3RlbmVycyA9IFtdLFxuICAgICAgICBxdWVyeSA9IHtcbiAgICAgICAgICAgIHE6ICdiaXRjb2luJyxcbiAgICAgICAgICAgIHNvcnQ6IFwiZm9ya3NcIixcbiAgICAgICAgICAgIG9yZGVyOiBcImRlc2NcIixcbiAgICAgICAgICAgIHBlcl9wYWdlOiAxMDBcbiAgICAgICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBiYXNlQXBpVXJsOiAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvcmVwb3NpdG9yaWVzJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXRUeHQgPSBkMy5zZWxlY3QoJyNzZWFyY2gtaW5wdXQnKTtcbiAgICAgICAgICAgIHNlYXJjaEJ0biA9IGQzLnNlbGVjdCgnI3NlYXJjaC1idG4nKTtcbiAgICAgICAgICAgIHNlYXJjaE1zZyA9IGQzLnNlbGVjdCgnI3NlYXJjaC1tc2cnKVxuXG4gICAgICAgICAgICBiYXNlQXBpVXJsID0gdGhpcy5zZXR0aW5ncy5iYXNlQXBpVXJsO1xuXG4gICAgICAgICAgICBzZWFyY2hCdG4ub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VRdWVyeSgpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcih1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VRdWVyeSgpIHtcbiAgICAgICAgcXVlcnkucSA9IGlucHV0VHh0LnByb3BlcnR5KCd2YWx1ZScpIHx8ICdiaXRjb2luJztcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBxdWVyeSkge1xuICAgICAgICAgICAgYXJyLnB1c2goa2V5ICsgJz0nICsgcXVlcnlba2V5XSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXJsID0gYmFzZUFwaVVybCArICc/JyArIGFyci5qb2luKCcmJyk7XG5cbiAgICAgICAgY29uc29sZS5sb2codXJsKTtcbiAgICAgICAgc2VhcmNoTXNnLnRleHQoJ+W9k+WJjeaQnOe0ouWcsOWdgDogJyArIHVybCk7XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxufSgpKVxuIiwidmFyIEJhciA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hhcnRXaWR0aCA9IDMwMCxcbiAgICAgICAgYmFySGVpZ2h0ID0gMjAsXG4gICAgICAgIGdyb3VwSGVpZ2h0ID0gMCxcbiAgICAgICAgZ2FwQmV0d2Vlbkdyb3VwcyA9IDEwLFxuICAgICAgICBzcGFjZUZvckxhYmVscyA9IDE1MCxcbiAgICAgICAgc3BhY2VGb3JMZWdlbmQgPSAxNTAsXG4gICAgICAgIGJhcklkLFxuICAgICAgICBzdmcsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHlBeGlzO1xuXG4gICAgLy8gWmlwIHRoZSBzZXJpZXMgZGF0YSB0b2dldGhlciAoZmlyc3QgdmFsdWVzLCBzZWNvbmQgdmFsdWVzLCBldGMuKVxuICAgIHZhciB6aXBwZWREYXRhID0gW107XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgdGl0bGU6IFwiYmFyVGl0bGVcIixcbiAgICAgICAgICAgIGRlc2M6IFwiYmFyRGVzY1wiLFxuICAgICAgICAgICAgYmFySWQ6IFwiI2JhcklkXCJcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJhcklkID0gdGhpcy5zZXR0aW5ncy5iYXJJZDtcblxuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI2JhclRpdGxlXCIpLnRleHQodGhpcy5zZXR0aW5ncy50aXRsZSk7XG4gICAgICAgICAgICBkMy5zZWxlY3QoXCIjYmFyRGVzY1wiKS50ZXh0KHRoaXMuc2V0dGluZ3MuZGVzYyk7XG5cbiAgICAgICAgICAgIGNoYXJ0ID0gZDMuc2VsZWN0KGJhcklkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY2hhcnRcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QmFyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6aXBwaW5nRGF0YShkYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5zZXJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB6aXBwZWREYXRhLnB1c2goZGF0YS5zZXJpZXNbal0udmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dCYXIoKSB7XG4gICAgICAgIC8vQ2xlYW5cbiAgICAgICAgemlwcGVkRGF0YSA9IFtdO1xuXG4gICAgICAgIGRhdGEgPSBVdGlscy5nZXRCYXJEYXRhKCk7XG4gICAgICAgIGdyb3VwSGVpZ2h0ID0gYmFySGVpZ2h0ICogZGF0YS5zZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgIHppcHBpbmdEYXRhKGRhdGEpO1xuXG4gICAgICAgIC8vIENvbG9yIHNjYWxlXG4gICAgICAgIHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MjAoKTtcbiAgICAgICAgdmFyIGNoYXJ0SGVpZ2h0ID0gYmFySGVpZ2h0ICogemlwcGVkRGF0YS5sZW5ndGggKyBnYXBCZXR3ZWVuR3JvdXBzICogZGF0YS5sYWJlbHMubGVuZ3RoO1xuXG4gICAgICAgIHZhciB4ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oWzAsIGQzLm1heCh6aXBwZWREYXRhKV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGNoYXJ0V2lkdGhdKTtcblxuICAgICAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAucmFuZ2UoW2NoYXJ0SGVpZ2h0ICsgZ2FwQmV0d2Vlbkdyb3VwcywgMF0pO1xuXG4gICAgICAgIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgLnNjYWxlKHkpXG4gICAgICAgICAgICAudGlja0Zvcm1hdCgnJylcbiAgICAgICAgICAgIC50aWNrU2l6ZSgwKVxuICAgICAgICAgICAgLm9yaWVudChcImxlZnRcIik7XG5cbiAgICAgICAgdmFyIHN2ZyA9IGNoYXJ0XG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNwYWNlRm9yTGFiZWxzICsgY2hhcnRXaWR0aCArIHNwYWNlRm9yTGVnZW5kKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnRIZWlnaHQpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgbm9kZXNcbiAgICAgICAgdmFyIGJhck5vZGVzID0gc3ZnLnNlbGVjdEFsbChcImdcIikuZGF0YSh6aXBwZWREYXRhLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIFtkLCBpXTtcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBDcmVhdGUgYmFyc1xuICAgICAgICB2YXIgYmFyID0gYmFyTm9kZXNcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNwYWNlRm9yTGFiZWxzICsgXCIsXCIgKyAoaSAqIGJhckhlaWdodCArIGdhcEJldHdlZW5Hcm91cHMgKiAoMC41ICsgTWF0aC5mbG9vcihpIC8gZGF0YS5zZXJpZXMubGVuZ3RoKSkpICsgXCIpXCI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgcmVjdGFuZ2xlcyBvZiB0aGUgY29ycmVjdCB3aWR0aFxuICAgICAgICBiYXIuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoaSAlIGRhdGEuc2VyaWVzLmxlbmd0aCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhclwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgYmFySGVpZ2h0IC0gMSk7XG5cbiAgICAgICAgLy8gQWRkIHRleHQgbGFiZWwgaW4gYmFyXG4gICAgICAgIGJhci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4KGQpIC0gMztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgYmFySGVpZ2h0IC8gMilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBEcmF3IGxhYmVsc1xuICAgICAgICBiYXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGdyb3VwSGVpZ2h0IC8gMilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgIGlmIChpICUgZGF0YS5zZXJpZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHNbTWF0aC5mbG9vcihpIC8gZGF0YS5zZXJpZXMubGVuZ3RoKV07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGVsZXRlIHRoZSBleHRyYSBub2Rlc1xuICAgICAgICBiYXJOb2Rlcy5leGl0KClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5zdHlsZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBzcGFjZUZvckxhYmVscyArIFwiLCBcIiArIC1nYXBCZXR3ZWVuR3JvdXBzIC8gMiArIFwiKVwiKVxuICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xuXG4gICAgICAgIC8vIERyYXcgbGVnZW5kXG4gICAgICAgIHZhciBsZWdlbmRSZWN0U2l6ZSA9IDE4LFxuICAgICAgICAgICAgbGVnZW5kU3BhY2luZyA9IDQ7XG5cbiAgICAgICAgdmFyIGxlZ2VuZERhdGEgPSBzdmcuc2VsZWN0QWxsKCcubGVnZW5kJylcbiAgICAgICAgICAgIC5kYXRhKGRhdGEuc2VyaWVzKTtcblxuICAgICAgICB2YXIgbGVnZW5kID0gbGVnZW5kRGF0YVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gbGVnZW5kUmVjdFNpemUgKyBsZWdlbmRTcGFjaW5nO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAtZ2FwQmV0d2Vlbkdyb3VwcyAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIGhvcnogPSBzcGFjZUZvckxhYmVscyArIGNoYXJ0V2lkdGggKyA0MCAtIGxlZ2VuZFJlY3RTaXplO1xuICAgICAgICAgICAgICAgIHZhciB2ZXJ0ID0gaSAqIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaG9yeiArICcsJyArIHZlcnQgKyAnKSc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBsZWdlbmQuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFJlY3RTaXplKVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZFJlY3RTaXplKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcihpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoaSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBsZWdlbmQuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCBsZWdlbmRSZWN0U2l6ZSArIGxlZ2VuZFNwYWNpbmcpXG4gICAgICAgICAgICAuYXR0cigneScsIGxlZ2VuZFJlY3RTaXplIC0gbGVnZW5kU3BhY2luZylcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5sYWJlbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxlZ2VuZERhdGEuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cbn0oKSlcbiIsInZhciBUcmVlbWFwID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciB3ID0gOTcwLFxuICAgICAgICBoID0gNTAwLFxuICAgICAgICB4ID0gZDMuc2NhbGUubGluZWFyKCkucmFuZ2UoWzAsIHddKSxcbiAgICAgICAgeSA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFswLCBoXSksXG4gICAgICAgIGNvbG9yID0gZDMuc2NhbGUuY2F0ZWdvcnkyMGMoKSxcbiAgICAgICAgcm9vdCA9IFtdLFxuICAgICAgICBub2RlID0gW10sXG4gICAgICAgIGNoYXJ0LFxuICAgICAgICB0cmVlbWFwLFxuICAgICAgICBzdmc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgdGl0bGU6IFwidHJlZW1hcFRpdGxlXCIsXG4gICAgICAgICAgICBkZXNjOiBcInRyZWVtYXBEZXNjXCIsXG4gICAgICAgICAgICB0cmVlbWFwSWQ6IFwiI3RyZWVtYXBJZFwiXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHJlZW1hcElkID0gdGhpcy5zZXR0aW5ncy50cmVlbWFwSWQ7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiN0cmVlbWFwVGl0bGVcIikudGV4dCh0aGlzLnNldHRpbmdzLnRpdGxlKTtcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiN0cmVlbWFwRGVzY1wiKS50ZXh0KHRoaXMuc2V0dGluZ3MuZGVzYyk7XG5cbiAgICAgICAgICAgIGNoYXJ0ID0gZDMuc2VsZWN0KHRyZWVtYXBJZCkuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgdyArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgaCArIFwicHhcIilcblxuICAgICAgICAgICAgc3ZnID0gY2hhcnRcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGgpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSguNSwuNSlcIik7XG5cbiAgICAgICAgICAgIHRyZWVtYXAgPSBkMy5sYXlvdXQudHJlZW1hcCgpXG4gICAgICAgICAgICAgICAgLy8gLnJvdW5kKGZhbHNlKVxuICAgICAgICAgICAgICAgIC5zaXplKFt3LCBoXSlcbiAgICAgICAgICAgICAgICAvLyAuc3RpY2t5KGZhbHNlKVxuICAgICAgICAgICAgICAgIC52YWx1ZShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLndhdGNoZXJzX2NvdW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHNob3dDaGFydChkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dDaGFydChkYXRhKSB7XG4gICAgICAgIG5vZGUgPSByb290ID0gVXRpbHMuZ2V0VHJlZURhdGEoZGF0YSk7XG5cbiAgICAgICAgdmFyIG5vZGVzID0gdHJlZW1hcC5ub2Rlcyhyb290KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFkLmNoaWxkcmVuO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGNlbGwgPSBzdmcuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC53YXRjaGVyc19jb3VudDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjZWxsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHpvb20obm9kZSA9PSBkLnBhcmVudCA/IHJvb3QgOiBkLnBhcmVudCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjZWxsLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmR4IC0gMTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuZHkgLSAxO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcihkLnBhcmVudC5uYW1lKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNlbGwuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMiAqIGQuZHggLyAzICsgMjA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5keSAvIDI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubmFtZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBkLncgPSB0aGlzLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBkLmR4ID4gZC53ID8gMSA6IDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgICAgICAuZXhpdCgpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgZDMuc2VsZWN0KHdpbmRvdykub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHpvb20ocm9vdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGQzLnNlbGVjdChcIiN0cmVlbWFwU2VsZWN0XCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJlZW1hcC52YWx1ZSh0aGlzLnZhbHVlID09IFwid2F0Y2hlcnNcIiA/IHdhdGNoZXJzQ291bnQgOiBmb3Jrc0NvdW50KS5ub2Rlcyhyb290KTtcbiAgICAgICAgICAgIHpvb20obm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhdGNoZXJzQ291bnQoZCkge1xuICAgICAgICByZXR1cm4gZC53YXRjaGVyc19jb3VudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3Jrc0NvdW50KGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZm9ya3NfY291bnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gem9vbShkKSB7XG4gICAgICAgIHZhciBreCA9IHcgLyBkLmR4LFxuICAgICAgICAgICAga3kgPSBoIC8gZC5keTtcbiAgICAgICAgeC5kb21haW4oW2QueCwgZC54ICsgZC5keF0pO1xuICAgICAgICB5LmRvbWFpbihbZC55LCBkLnkgKyBkLmR5XSk7XG5cbiAgICAgICAgdmFyIHQgPSBzdmcuc2VsZWN0QWxsKFwiZy5jZWxsXCIpLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKGQzLmV2ZW50LmFsdEtleSA/IDc1MDAgOiA3NTApXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChkLngpICsgXCIsXCIgKyB5KGQueSkgKyBcIilcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHQuc2VsZWN0KFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGt4ICogZC5keCAtIDE7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBreSAqIGQuZHkgLSAxO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB0LnNlbGVjdChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgKiBreCAqIGQuZHggLyAzICsgMjA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga3kgKiBkLmR5IC8gMjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4ga3ggKiBkLmR4ID4gZC53ID8gMSA6IDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBub2RlID0gZDtcbiAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG59KCkpXG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxvYWRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsXCIpO1xuXG4gICAgLyoqXG4gICAgICogU2VhcmNoXG4gICAgICovXG4gICAgU2VhcmNoZXIuaW5pdCgpO1xuXG4gICAgLyoqXG4gICAgICogc3RhcnQgQmFyQ2hhcnRcbiAgICAgKi9cbiAgICBCYXIuc2V0dGluZ3MgPSB7XG4gICAgICAgIHRpdGxlOiBcIlRvcDEwMCBCYXJDaGFydFwiLFxuICAgICAgICBkZXNjOiBcIlRoaXMgaXMgYSBnb29kIGV4YW1wbGUuXCIsXG4gICAgICAgIGJhcklkOiBcIiNiYXJJZFwiXG4gICAgfVxuICAgIEJhci5pbml0KCk7XG5cbiAgICAvKipcbiAgICAgKiBzdGFydCB0cmVlbWFwXG4gICAgICovXG4gICAgVHJlZW1hcC5zZXR0aW5ncyA9IHtcbiAgICAgICAgdGl0bGU6IFwiVG9wMTAwIHRyZWVtYXBcIixcbiAgICAgICAgZGVzYzogXCJZb3UgY2FuIGNsaWNrIHRoZSBibG9jayB0byB6b29tIGl0LlwiLFxuICAgICAgICB0cmVlbWFwSWQ6IFwiI3NhY2RsVHJlZW1hcFwiXG4gICAgfVxuICAgIFRyZWVtYXAuaW5pdCgpO1xuXG4gICAgZnVuY3Rpb24gc2hvdyh1cmwpIHtcbiAgICAgICAgdmFyIGxvYWRlciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH0sIDMwMCk7XG5cbiAgICAgICAgdXJsID0gdXJsIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvc2VhcmNoJztcblxuICAgICAgICBkMy5qc29uKHVybCwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxvYWRlcik7XG4gICAgICAgICAgICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCLliqDovb3mlbDmja7lpLHotKXvvIzor7fmo4Dmn6XmgqjnmoTnvZHnu5zorr7nva7jgIJcIilcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFV0aWxzLmdldERhdGEoZGF0YSk7XG5cbiAgICAgICAgICAgIEJhci5zaG93KCk7XG4gICAgICAgICAgICBUcmVlbWFwLnNob3coKTtcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxvYWRlcik7XG4gICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgU2VhcmNoZXIuYWRkTGlzdGVuZXIoZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHNob3codXJsKTtcbiAgICB9KVxuXG4gICAgc2hvdygpO1xufSkoKVxuIl19
