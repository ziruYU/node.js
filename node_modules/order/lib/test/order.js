(function() {
  var Order;

  Order = require('../order');

  module.exports = {
    async: function(æ) {
      var list, n, results;
      n = 0;
      results = [
        {
          idx: 1,
          before: -1,
          after: -1
        }, {
          idx: 2,
          before: +1,
          after: -1
        }, {
          idx: 3,
          before: +2,
          after: -1
        }, {
          idx: 0,
          before: -1,
          after: +1
        }
      ];
      list = new Order(function(e) {
        return æ.deepEqual(e, results.shift());
      });
      list.push((function(done) {
        setTimeout(done, 30);
        return n++;
      }));
      list.push((function(done) {
        setTimeout(done, 10);
        return n++;
      }));
      list.push((function(done) {
        setTimeout(done, 20);
        return n++;
      }));
      list.insert(1, (function(done) {
        setTimeout(done, 4);
        return n++;
      }));
      æ.equal(list.length, 4);
      æ.deepEqual(list.slice(), [0, 3, 1, 2]);
      æ.deepEqual(list.done, [false, false, false, false]);
      return setTimeout(function() {
        æ.equal(results.length, 0);
        æ.deepEqual(list.done, [true, true, true, true]);
        return æ.done();
      }, 32);
    },
    sync: function(æ) {
      var list, n, results;
      n = 0;
      results = [
        {
          idx: 0,
          before: -1,
          after: -1
        }, {
          idx: 1,
          before: +0,
          after: -1
        }, {
          idx: 2,
          before: +1,
          after: -1
        }, {
          idx: 1,
          before: +0,
          after: +2
        }
      ];
      list = new Order(function(e) {
        return æ.deepEqual(e, results.shift());
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.insert(1, function(done) {
        done();
        return n++;
      });
      æ.equal(list.length, 4);
      æ.deepEqual(list.slice(), [0, 3, 1, 2]);
      æ.deepEqual(list.done, [true, true, true, true]);
      æ.equal(results.length, 0);
      return æ.done();
    },
    rm: function(æ) {
      var list, n, results;
      n = 0;
      results = [
        {
          idx: 0,
          before: -1,
          after: -1
        }, {
          idx: 1,
          before: +0,
          after: -1
        }, {
          idx: 2,
          before: +1,
          after: -1
        }, {
          idx: 3,
          before: +2,
          after: -1
        }
      ];
      list = new Order(function(e) {
        return æ.deepEqual(e, results.shift());
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.push(function(done) {
        done();
        return n++;
      });
      list.remove(1);
      æ.deepEqual(list.slice(), [0, 2, 3]);
      æ.equal(list.done.length, 3);
      æ.equal(list.keys.length, 3);
      æ.equal(list.length, 3);
      list.pop();
      æ.deepEqual(list.slice(), [0, 2]);
      æ.equal(list.done.length, 2);
      æ.equal(list.keys.length, 2);
      æ.equal(list.length, 2);
      list.shift();
      æ.deepEqual(list.slice(), [2]);
      æ.equal(list.done.length, 1);
      æ.equal(list.keys.length, 1);
      æ.equal(list.length, 1);
      æ.equal(results.length, 0);
      return æ.done();
    }
  };

}).call(this);
