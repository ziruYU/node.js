(function() {
  var Order, delay, mark, ready, release, splice;
  var __slice = Array.prototype.slice, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  splice = Array.prototype.splice;

  mark = function(list) {
    list._sync = true;
    return list;
  };

  release = function(list, result) {
    if (typeof list._sync === "function") list._sync();
    delete list._sync;
    return result;
  };

  delay = function(list, callback) {
    if (list._sync) {
      return list._sync = callback;
    } else {
      return callback();
    }
  };

  ready = function() {
    var after, args, before, i, _arg;
    var _this = this;
    _arg = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    i = _arg.i;
    if (isNaN(i)) return;
    if (this.done[i]) return;
    this.done[i] = true;
    after = i + 1;
    while (this.done[after] === false) {
      after++;
    }
    if (this.done[after] === void 0) after = -1;
    before = i - 1;
    while (this.done[before] === false) {
      before--;
    }
    if (this.done[before] === void 0) before = -1;
    return delay(this, function() {
      var _ref;
      return (_ref = _this.callback) != null ? _ref.call.apply(_ref, [_this, {
        idx: i,
        before: before,
        after: after
      }].concat(__slice.call(args))) : void 0;
    });
  };

  Order = (function() {

    __extends(Order, Array);

    function Order(callback) {
      this.callback = callback;
      this.splice = __bind(this.splice, this);
      this.remove = __bind(this.remove, this);
      this.insert = __bind(this.insert, this);
      this.shift = __bind(this.shift, this);
      this.pop = __bind(this.pop, this);
      this.unshift = __bind(this.unshift, this);
      this.push = __bind(this.push, this);
      this.keys = [];
      this.done = [];
      Order.__super__.constructor.apply(this, arguments);
    }

    Order.prototype.push = function(entry) {
      var idx;
      if (entry == null) return;
      idx = {
        i: this.length
      };
      this.done.push(false);
      this.keys.push(idx);
      return release(this, Order.__super__.push.call(this, entry(ready.bind(mark(this), idx))));
    };

    Order.prototype.unshift = function(entry) {
      var e, idx, _i, _len, _ref;
      if (entry == null) return;
      idx = {
        i: 0
      };
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        e.i++;
      }
      this.done.unshift(false);
      this.keys.unshift(idx);
      return release(this, Order.__super__.unshift.call(this, entry(ready.bind(mark(this), idx))));
    };

    Order.prototype.pop = function() {
      var _ref;
      if ((_ref = this.keys[this.keys.length - 1]) != null) _ref.i = NaN;
      this.done.pop();
      this.keys.pop();
      return Order.__super__.pop.apply(this, arguments);
    };

    Order.prototype.shift = function() {
      var e, _i, _len, _ref, _ref2;
      if ((_ref = this.keys[0]) != null) _ref.i = NaN;
      this.done.shift();
      this.keys.shift();
      _ref2 = this.keys;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        e.i--;
      }
      return Order.__super__.shift.apply(this, arguments);
    };

    Order.prototype.insert = function(i, entry) {
      var e, idx, _i, _len, _ref;
      idx = {
        i: i
      };
      _ref = this.keys.slice(i);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        e.i++;
      }
      this.keys.splice(i, 0, idx);
      this.done.splice(i, 0, false);
      return release(this, splice.call(this, i, 0, entry(ready.bind(mark(this), idx))));
    };

    Order.prototype.remove = function(i) {
      var e, _i, _len, _ref, _ref2, _ref3;
      if ((_ref = this.keys[i]) != null) _ref.i = NaN;
      this.done.splice(i, 1);
      this.keys.splice(i, 1);
      _ref2 = this.keys.slice(i);
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        e.i--;
      }
      return (_ref3 = splice.call(this, i, 1)) != null ? _ref3[0] : void 0;
    };

    Order.prototype.splice = function() {
      var del, dones, e, entries, entry, i, idxs, index, len, result, sync, syncs, _i, _j, _k, _len, _len2, _len3, _len4, _ref, _ref2, _ref3, _ref4;
      index = arguments[0], del = arguments[1], entries = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (index == null) return Order.__super__.splice.apply(this, arguments);
      len = entries.length;
      _ref = this.keys.slice(index, (index + del));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        e.i = NaN;
      }
      idxs = (function() {
        var _results;
        _results = [];
        for (i = 0; 0 <= len ? i < len : i > len; 0 <= len ? i++ : i--) {
          _results.push({
            i: i + index
          });
        }
        return _results;
      })();
      dones = (function() {
        var _results;
        _results = [];
        for (i = 0; 0 <= len ? i < len : i > len; 0 <= len ? i++ : i--) {
          _results.push(false);
        }
        return _results;
      })();
      (_ref2 = this.done).splice.apply(_ref2, [index, del].concat(__slice.call(dones)));
      (_ref3 = this.keys).splice.apply(_ref3, [index, del].concat(__slice.call(idxs)));
      _ref4 = this.keys.slice(index + len);
      for (_j = 0, _len2 = _ref4.length; _j < _len2; _j++) {
        e = _ref4[_j];
        e.i = e.i - del + len;
      }
      syncs = [];
      for (i = 0, _len3 = entries.length; i < _len3; i++) {
        entry = entries[i];
        mark(this);
        entries[i] = entry(ready.bind(this, idxs[i]));
        syncs.push(this._sync);
      }
      mark(this);
      result = Order.__super__.splice.apply(this, [index, del].concat(__slice.call(entries)));
      for (_k = 0, _len4 = syncs.length; _k < _len4; _k++) {
        sync = syncs[_k];
        if (typeof sync === "function") sync();
      }
      release(this);
      return result;
    };

    return Order;

  })();

  Order.Order = Order;

  module.exports = Order;

}).call(this);
